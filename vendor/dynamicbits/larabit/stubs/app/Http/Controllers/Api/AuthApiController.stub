<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Http\Requests\Api\AuthApiRequest;
use App\Http\Requests\Api\PasswordOtpApiRequest;
use App\Http\Requests\Api\PasswordResetApiRequest;
use App\Http\Requests\Api\PasswordVerifyOtpApiRequest;
use App\Interfaces\Services\AuthServiceInterface;

class AuthApiController extends Controller
{
    public function __construct(
        private AuthServiceInterface $iAuthService
    ) {
    }

    public function auth(AuthApiRequest $request)
    {
        try {
            $credentials = $request->only('email', 'password');

            $response = $this->iAuthService->auth($credentials, createApiToken: true);

            $data = [
                'success' => $response ? true : false,
                'token' => is_string($response) ? $response : null,
                'message' => $response ? 'Authentication Successful' : 'Authentication Failed'
            ];
        } catch (\Exception $e) {
            return response()->json(['error' => $e->getMessage()], $e->getCode());
        }

        return response()->json($data, $response ? 200 : 401);
    }

    public function logout()
    {
        $tokenRevoked = $this->iAuthService->revokeApiToken();
        return response()->json([
            'success' => $tokenRevoked,
            'message' => $tokenRevoked ? 'Logout Successful' : 'Logout Failed',
        ]);
    }

    public function sendResetOTP(PasswordOtpApiRequest $request)
    {
        $otpSent = $this->iAuthService->sendResetOTP($request->validated('email'));

        $isBool = is_bool($otp);

        return response()->json([
            'success' => $otpSent,
            'message' => $otpSent ? 'Password Reset OTP has been sent' : 'Something went wrong',
        ], $otpSent ? 200 : 500);
    }

    public function verifyResetOTP(PasswordVerifyOtpApiRequest $request, string $email)
    {
        $resetLink = $this->iAuthService->verifyResetOTP($email, $request->validated('otp'));

        $isBool = is_bool($resetLink);

        return response()->json([
            'success' => !$isBool ? true : false,
            'resetLink' => !$isBool ? $resetLink : null,
            'message' => !$isBool ? 'Reset password using the given reset link. It is only valid for 5 minutes.' : 'Something went wrong'
        ], !$isBool ? 200 : 500);
    }

    public function resetPassword(PasswordResetApiRequest $request, string $email)
    {
        $updated = $this->iAuthService->updatePassword($email, $request->validated('password'));

        return response()->json([
            'success' => $updated,
            'message' => $updated ? 'Password has been updated' : 'Something went wrong',
        ], $updated ? 200 : 500);
    }
}
